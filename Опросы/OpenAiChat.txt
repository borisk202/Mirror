<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Рабочий WebSocket Чат</title>
<style>
  body {
    margin:0; padding:0; background:#121212; color:#eee; font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    display:flex; flex-direction: column; height: 100vh;
  }
  #loginScreen, #chatScreen {
    margin:auto; width: 100%; max-width: 400px;
    background:#1e1e1e; border-radius:8px; box-shadow: 0 0 12px #b22222aa;
    display: flex; flex-direction: column;
  }
  #loginScreen {
    padding: 20px;
  }
  #loginScreen h2 {
    margin-bottom: 10px;
    color:#b22222;
    text-align:center;
    user-select:none;
  }
  input[type=text], input[type=password] {
    padding:10px;
    margin-bottom: 15px;
    border: none;
    border-radius: 4px;
    font-size: 16px;
  }
  button {
    background: #b22222;
    border:none;
    padding: 12px;
    font-size: 16px;
    color:#fff;
    border-radius: 5px;
    cursor:pointer;
    user-select:none;
  }
  button:hover {
    background: #ff4c4c;
  }

  #chatScreen {
    flex: 1; display: flex; flex-direction: column; 
    height: 100vh;
    max-width: 700px;
    padding: 10px;
  }
  #chatHeader {
    display:flex; justify-content: space-between; align-items: center;
    border-bottom: 2px solid #b22222;
    padding-bottom: 5px;
    user-select:none;
  }
  #chatHeader h3 {
    margin:0;
    color:#b22222;
  }
  #chatHeader button {
    background: transparent;
    border: 1.5px solid #b22222;
    padding: 6px 10px;
    color: #b22222;
    font-weight: 600;
    border-radius: 5px;
  }
  #chatHeader button:hover {
    background: #b22222;
    color: #fff;
  }

  #messages {
    flex: 1;
    overflow-y: auto;
    margin: 10px 0;
    background: #222;
    border-radius: 8px;
    padding: 10px;
    display: flex;
    flex-direction: column;
  }
  .message {
    margin-bottom: 10px;
    padding: 8px 12px;
    border-radius: 15px;
    max-width: 80%;
    word-wrap: break-word;
    user-select:none;
  }
  .message.self {
    background: #b22222;
    align-self: flex-end;
    color: #fff;
    text-align: right;
  }
  .message.other {
    background: #444;
    align-self: flex-start;
    color: #eee;
  }
  .message .author {
    font-weight: bold;
    font-size: 0.9em;
    margin-bottom: 2px;
  }
  #inputArea {
    display: flex;
    gap: 10px;
  }
  #messageInput {
    flex: 1;
    padding: 12px;
    font-size: 16px;
    border-radius: 10px;
    border: none;
    outline:none;
  }
  #sendBtn {
    background: #b22222;
    border: none;
    padding: 0 20px;
    border-radius: 10px;
    color: white;
    font-weight: 700;
    cursor: pointer;
    user-select:none;
  }
  #sendBtn:hover {
    background: #ff4c4c;
  }
  #status {
    font-size: 0.85em;
    color: #bbb;
    text-align: center;
    margin-top: 5px;
    user-select:none;
  }
</style>
</head>
<body>

<div id="loginScreen">
  <h2>Вход в чат</h2>
  <input type="text" id="nickname" placeholder="Введите ник" maxlength="20" autofocus autocomplete="off" />
  <input type="password" id="password" placeholder="Введите пароль" maxlength="20" autocomplete="off" />
  <button id="loginBtn">Войти</button>
  <div id="loginError" style="color:#f55; margin-top:8px; display:none;"></div>
</div>

<div id="chatScreen" style="display:none;">
  <div id="chatHeader">
    <h3>Red-Black Chat</h3>
    <button id="logoutBtn" title="Выйти">Выйти</button>
  </div>
  <div id="messages" aria-live="polite" aria-atomic="false" role="log"></div>
  <div id="inputArea">
    <input type="text" id="messageInput" placeholder="Введите сообщение..." maxlength="500" autocomplete="off" />
    <button id="sendBtn">Отправить</button>
  </div>
  <div id="status">Подключение...</div>
</div>

<script>
(() => {
  const WS_URL = "wss://s14748.blr1.piesocket.com/v3/1?api_key=BzO19MHYivowkIQjrVBRMl6kVY7pg93yIxmX6JKu&notify_self=1";

  let ws = null;
  let nickname = null;
  let password = null;
  let isConnected = false;

  const loginScreen = document.getElementById("loginScreen");
  const chatScreen = document.getElementById("chatScreen");
  const nicknameInput = document.getElementById("nickname");
  const passwordInput = document.getElementById("password");
  const loginBtn = document.getElementById("loginBtn");
  const loginError = document.getElementById("loginError");

  const messagesDiv = document.getElementById("messages");
  const messageInput = document.getElementById("messageInput");
  const sendBtn = document.getElementById("sendBtn");
  const logoutBtn = document.getElementById("logoutBtn");
  const statusDiv = document.getElementById("status");

  function addMessage(author, text, self = false) {
    const div = document.createElement("div");
    div.className = "message " + (self ? "self" : "other");
    div.innerHTML = `<div class="author">${escapeHtml(author)}</div><div class="text">${escapeHtml(text)}</div>`;
    messagesDiv.appendChild(div);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  }

  function escapeHtml(text) {
    return text.replace(/[&<>"']/g, (m) => {
      switch(m) {
        case "&": return "&amp;";
        case "<": return "&lt;";
        case ">": return "&gt;";
        case '"': return "&quot;";
        case "'": return "&#039;";
        default: return m;
      }
    });
  }

  function setStatus(text, isError = false) {
    statusDiv.textContent = text;
    statusDiv.style.color = isError ? "#f55" : "#bbb";
  }

  function connectWs() {
    setStatus("Подключение...");
    ws = new WebSocket(WS_URL);

    ws.onopen = () => {
      isConnected = true;
      setStatus(`Подключено как ${nickname}`);
      // Отправим сообщение с авторизацией (просто для примера)
      ws.send(JSON.stringify({
        type: "auth",
        nick: nickname,
        pass: password
      }));
    };

    ws.onmessage = (evt) => {
      let data;
      try {
        data = JSON.parse(evt.data);
      } catch {
        addMessage("Сервер", evt.data, false);
        return;
      }

      if(data.type === "message" && data.nick && data.text) {
        const isSelf = (data.nick === nickname);
        addMessage(data.nick, data.text, isSelf);
        if (!isSelf) playNotificationSound();
      } else if (data.type === "auth_success") {
        setStatus("Авторизация успешна");
      } else if (data.type === "auth_fail") {
        setStatus("Ошибка авторизации", true);
        ws.close();
      } else if (data.type === "system") {
        addMessage("Система", data.text || "[Системное сообщение]", false);
      } else {
        addMessage("Сервер", evt.data, false);
      }
    };

    ws.onclose = () => {
      isConnected = false;
      setStatus("Отключено. Обновите страницу для переподключения.", true);
    };

    ws.onerror = () => {
      setStatus("Ошибка подключения.", true);
    };
  }

  function sendMessage() {
    if (!isConnected) return;
    const text = messageInput.value.trim();
    if (text.length === 0) return;
    if (text.length > 500) {
      alert("Сообщение слишком длинное (максимум 500 символов).");
      return;
    }

    const msg = {
      type: "message",
      nick: nickname,
      text: text
    };

    ws.send(JSON.stringify(msg));
    addMessage(nickname, text, true);
    messageInput.value = "";
    messageInput.focus();
  }

  function playNotificationSound() {
    const audio = new Audio("data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEAQB8AAIA+AAACABAAZGF0YQA=");
    audio.play().catch(() => {});
  }

  loginBtn.addEventListener("click", () => {
    loginError.style.display = "none";
    const nick = nicknameInput.value.trim();
    const pass = passwordInput.value;

    if (nick.length < 3) {
      loginError.textContent = "Ник должен быть минимум 3 символа.";
      loginError.style.display = "block";
      return;
    }
    if (pass.length < 3) {
      loginError.textContent = "Пароль должен быть минимум 3 символа.";
      loginError.style.display = "block";
      return;
    }

    nickname = nick;
    password = pass;

    loginScreen.style.display = "none";
    chatScreen.style.display = "flex";

    connectWs();

    messageInput.focus();
  });

  sendBtn.addEventListener("click", sendMessage);
  messageInput.addEventListener("keydown", (e) => {
    if(e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });

  logoutBtn.addEventListener("click", () => {
    if(ws) ws.close();
    nickname = null;
    password = null;
    messagesDiv.innerHTML = "";
    messageInput.value = "";
    loginScreen.style.display = "flex";
    chatScreen.style.display = "none";
    setStatus("");
    nicknameInput.focus();
  });
})();
</script>

</body>
</html>
